# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  merge_group:
    types: [checks_requested]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.x' ]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      # You can test your matrix by printing the current Go version
      - name: Display Go version
        run: go version

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Run coverage
        run: go test  -v  -coverprofile=coverage.txt -covermode=atomic -cover
      - name: HTTP Request Action
        uses: fjogeleit/http-request-action@v1.16.1
        with:
          url: 'https://api.github.com/repos/vanijin/test1/statuses/'${{github.sha}}
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json","Authorization":"Bearer '${{github.token}}'","X-GitHub-Api-Version":"X-GitHub-Api-Version","Accept":"application/vnd.github+json"}'
          data: '{"state":"success","target_url":"https://example.com/build/status","description":"The build succeeded!","context":"CI"}'



